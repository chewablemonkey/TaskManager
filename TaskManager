function App() {
  // ... (previous state remains the same)
  const [tasks, setTasks] = React.useState([
    {
      id: 1,
      title: "Website Redesign",
      description: "Redesign the company website with modern UI/UX principles",
      status: "In Progress",
      priority: "High",
      assignee: "Alice Smith",
      dueDate: "2024-02-15"
    },
    {
      id: 2,
      title: "Content Strategy",
      description: "Develop content strategy for Q1 2024",
      status: "Planning",
      priority: "Medium",
      assignee: "Bob Johnson",
      dueDate: "2024-02-20"
    }
  ]);

  const [showDescriptionModal, setShowDescriptionModal] = React.useState(false);
  const [selectedTask, setSelectedTask] = React.useState(null);
  const [newTask, setNewTask] = React.useState({
    title: "",
    description: "",
    status: "Not Started",
    priority: "Medium",
    assignee: "",
    dueDate: ""
  });

  // Add new function to handle task title click
  const handleTaskClick = (task) => {
    setSelectedTask(task);
    setShowDescriptionModal(true);
  };

  // Update addTask function to include description
  const addTask = () => {
    if (newTask.title && newTask.assignee && newTask.dueDate) {
      setTasks([...tasks, { ...newTask, id: tasks.length + 1 }]);
      setNewTask({
        title: "",
        description: "",
        status: "Not Started",
        priority: "Medium",
        assignee: "",
        dueDate: ""
      });
    }
  };

  return (
    <div className="p-6 max-w-6xl mx-auto relative">
      {/* ... (previous JSX remains the same until the task form) ... */}

      {view === 'tasks' && (
        <>
          <div className="bg-white p-4 rounded-lg shadow mb-6">
            <h2 className="text-xl font-semibold mb-4">Add New Task</h2>
            <div className="grid grid-cols-1 gap-4">
              <input
                type="text"
                placeholder="Task Title"
                value={newTask.title}
                onChange={(e) => setNewTask({...newTask, title: e.target.value})}
                className="border p-2 rounded"
              />
              <textarea
                placeholder="Task Description"
                value={newTask.description}
                onChange={(e) => setNewTask({...newTask, description: e.target.value})}
                className="border p-2 rounded h-24"
              />
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <select
                  value={newTask.priority}
                  onChange={(e) => setNewTask({...newTask, priority: e.target.value})}
                  className="border p-2 rounded"
                >
                  <option value="Low">Low Priority</option>
                  <option value="Medium">Medium Priority</option>
                  <option value="High">High Priority</option>
                </select>
                <select
                  value={newTask.assignee}
                  onChange={(e) => setNewTask({...newTask, assignee: e.target.value})}
                  className="border p-2 rounded"
                >
                  <option value="">Select Assignee</option>
                  {users.map(user => (
                    <option key={user.id} value={user.name}>{user.name}</option>
                  ))}
                </select>
                <input
                  type="date"
                  value={newTask.dueDate}
                  onChange={(e) => setNewTask({...newTask, dueDate: e.target.value})}
                  className="border p-2 rounded"
                />
                <button
                  onClick={addTask}
                  className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600"
                >
                  Add Task
                </button>
              </div>
            </div>
          </div>

          {/* Update the task list to make titles clickable */}
          <div className="bg-white rounded-lg shadow overflow-hidden">
            {/* ... (header row remains the same) ... */}
            {filteredTasks.map(task => (
              <div
                key={task.id}
                className="grid grid-cols-6 gap-4 p-4 border-t hover:bg-gray-50"
                onContextMenu={(e) => handleContextMenu(e, task.id)}
              >
                <div
                  className="cursor-pointer text-blue-600 hover:text-blue-800"
                  onClick={() => handleTaskClick(task)}
                >
                  {task.title}
                </div>
                {/* ... (rest of the task row remains the same) ... */}
              </div>
            ))}
          </div>
        </>
      )}

      {/* Add Description Modal */}
      {showDescriptionModal && selectedTask && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-xl max-w-lg w-full" onClick={e => e.stopPropagation()}>
            <div className="flex justify-between items-start mb-4">
              <div>
                <h3 className="text-xl font-semibold">{selectedTask.title}</h3>
                <p className="text-gray-500">Assigned to: {selectedTask.assignee}</p>
              </div>
              <button
                onClick={() => setShowDescriptionModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                âœ•
              </button>
            </div>
            <div className="mb-4">
              <h4 className="font-semibold mb-2">Description:</h4>
              <p className="text-gray-700 whitespace-pre-wrap">
                {selectedTask.description || "No description provided."}
              </p>
            </div>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="font-semibold">Status: </span>
                <span className={`px-2 py-1 rounded ${
                  selectedTask.status === 'Completed' ? 'bg-green-100 text-green-800' :
                  selectedTask.status === 'Started' ? 'bg-blue-100 text-blue-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {selectedTask.status}
                </span>
              </div>
              <div>
                <span className="font-semibold">Priority: </span>
                <span className={`px-2 py-1 rounded ${
                  selectedTask.priority === 'High' ? 'bg-red-100 text-red-800' :
                  selectedTask.priority === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-green-100 text-green-800'
                }`}>
                  {selectedTask.priority}
                </span>
              </div>
              <div>
                <span className="font-semibold">Due Date: </span>
                {selectedTask.dueDate}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* ... (other modals remain the same) ... */}
    </div>
  );
}
